<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="update_project_timesheet" model="base.automation">
            <field name="name">=> Update project work_base_timesheet</field>
            <field name="model_id" ref="account.model_account_analytic_line"/>
            <field name="state">code</field>
            <field name="code">
if (record.date) and (record.employee_id.id):
  work_base_ts = env['work_base.timesheet'].search([('date','=',record.date),('employee_id','=',record.employee_id.id)])
  if not work_base_ts.id:
    name = record.employee_id.name + " - " + str(record.date)
    work_base_ts = env['work_base.timesheet'].create({'name':name, 'date':record.date, 'employee_id':record.employee_id.id})
  record['work_base_timesheet_id'] = work_base_ts.id
            </field>
            <field name="trigger">on_create_or_write</field>
           <!-- <field name="trigger_field_ids">[(6, 0, [account.field_account_analytic_line__code])]</field>-->
            <field name="filter_pre_domain"></field>
            <field name="filter_domain"></field>
            <field name="active" eval="True"/>
        </record>


        <record id="update_repair_timesheet" model="base.automation">
            <field name="name">=> Update repair work_base_timesheet</field>
            <field name="model_id" ref="repair.model_repair_fee"/>
            <field name="state">code</field>
            <field name="code">
if (record.date) and (record.employee_id.id):
  work_base_ts = env['work_base.timesheet'].search([('date','=',record.date),('employee_id','=',record.employee_id.id)])
  if not work_base_ts.id:
    name = record.employee_id.name + " - " + str(record.date)
    work_base_ts = env['work_base.timesheet'].create({'name':name, 'date':record.date, 'employee_id':record.employee_id.id})
  record['work_base_timesheet_id'] = work_base_ts.id
            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="trigger_field_ids">(6, 0, [2608,6938])</field>-->
            <field name="filter_pre_domain"></field>
            <field name="filter_domain"></field>
            <field name="active" eval="True"/>
        </record>

        <record id="update_mrp_timesheet" model="base.automation">
            <field name="name">=> Update mrp work_base_timesheet</field>
            <field name="model_id" ref="mrp.model_mrp_workcenter_productivity"/>
            <field name="state">code</field>
            <field name="code">
if (record.date_start) and (record.user_id.id):
  date = record.date_start.date()
  work_base_ts = env['work.base.timesheet'].search([('date','=',date),('employee_id','=',record.user_id.employee_id.id)])
  if not work_base_ts.id:
    name = record.user_id.name + " - " + str(date)
    work_base_ts = env['work.base.timesheet'].create({'name':name, 'date':date, 'employee_id':record.user_id.employee_id.id})
  record['work_base_timesheet_id'] = work_base_ts.id
            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="trigger_field_ids">(6, 0, [2608,6938])</field>-->
            <field name="filter_pre_domain"></field>
            <field name="filter_domain"></field>
            <field name="active" eval="True"/>
        </record>
<!--
        <record id="refresh_work_base_timesheet_daily" model="ir.cron">
            <field name="name">=> Refresh work_base Timesheet</field>
            <field ref="model_work_base_timesheet" name="model_id"/>
            <field eval="True" name="active"/>
            <field name="user_id" ref="base.user_root"/>
            <field name="interval_number">1</field>
            <field name="channel_id">1</field>
            <field name="interval_type">days</field>
            <field name="numbercall">-1</field>
            <field eval="False" name="doall"/>
            <field name="state">code</field>
            <field name="code">
# timesheets review to assign work_base.timesheet:

# Project timesheets:
lines = env['account.analytic.line'].search([('work_base_timesheet_id','=',False),('employee_id','!=',False)])
for li in lines:
  work_base_timesheet = env['work_base.timesheet'].search([('employee_id','=',li.employee_id.id),('date','=',li.date)])
  if not work_base_timesheet.id:
    work_base_timesheet = env['work_base.timesheet'].create({'employee_id':li.employee_id.id, 'date':li.date})
  li['work_base_timesheet_id'] = work_base_timesheet.id


# Repair fees:
lines = env['repair.fee'].search([('work_base_timesheet_id','=',False),('employee_id','!=',False)])
raise Warning(lines)
for li in lines:
  work_base_timesheet = env['work_base.timesheet'].search([('employee_id','=',li.employee_id.id),('date','=',li.date)])
  if not work_base_timesheet.id:
    work_base_timesheet = env['work_base.timesheet'].create({'employee_id':li.employee_id.id, 'date':li.date})
  li['work_base_timesheet_id'] = work_base_timesheet.id


# Production:
lines = env['mrp.workcenter.productivity'].search([('work_base_timesheet_id','=',False),('user_id','!=',False)])
raise Warning(lines)
for li in lines:
  employee = env['hr.employee'].search([('user_id','=',li.user_id.id)])
  date = li.date_start.date()
  work_base_timesheet = env['work_base.timesheet'].search([('employee_id','=',employee.id),('date','=',date)])
  if not work_base_timesheet.id:
    work_base_timesheet = env['work_base.timesheet'].create({'employee_id':employee.id, 'date':date})
  li['work_base_timesheet_id'] = work_base_timesheet.id
            </field>
        </record>
-->
    </data>

</odoo>
