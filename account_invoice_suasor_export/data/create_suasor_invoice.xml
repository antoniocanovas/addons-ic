<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="suasor_invoice_create" model="base.automation">
            <field name="name">=>Crea Factura Suasor</field>
            <field name="model_id" ref="account.model_account_invoice"/>
            <field name="state">code</field>
            <field name="code">
if record.state in ['cancel']:
    record.suasor_invoice_id.unlink()

if record.state in ['open'] and not record.suasor_invoice_id.id:

    lineas_ids = record.invoice_line_ids
    lineas_num = len(record.invoice_line_ids)
    revisadas = []
    contador = 1
      # La mayoría de las variables (distintas de false) no hacen falta para cálculo, pero si para ver por pantalla o escribir:
    iva1, irpf1, req1, iva2, irpf2, req2, iva3, irpf3, req3  = "","","","","","","","",""
    iva_neto1, iva_tax1, irpf_neto1, irpf_tax1, req_neto1, req_tax1 = "","","","","",""
    iva_neto2, iva_tax2, irpf_neto2, irpf_tax2, req_neto2, req_tax2 = "","","","","",""
    iva_neto3, iva_tax3, irpf_neto3, irpf_tax3, req_neto3, req_tax3 = "","","","","",""
    cc1, cc2, cc3, serv1, serv2, serv3, activo1, activo2, activo3 = "","","", "","","", "", "",""
    iva_percent1, iva_percent2, iva_percent3, irpf_percent1, irpf_percent2, irpf_percent3, req_percent1, req_percent2, req_percent3 = "","","","","","","","",""

    provincias = {'VI':'01', 'AB':'02', 'A':'03', 'AL':'04', 'AV':'05', 'BA':'06', 'PM':'07', 'B':'08', 'BU':'09', 'CC':'10', 'CA':'11', 'CS':'12',
        'CR':'13', 'C':'14', 'CU':'16', 'GI':'17', 'GR':'18', 'GU':'19', 'SS':'20', 'H':'21', 'HU':'22', 'J':'23', 'LE':'24', 'L':'25', 'LO':'26',
        'LU':'27', 'M':'28', 'MA':'29', 'MU':'30', 'NA':'31', 'OR':'32', 'PA':'34', 'GC':'35', 'PO':'36', 'SA':'37',  'TF':'38', 'S':'39', 'SG':'40',
        'SE':'41', 'SO':'42', 'T':'43', 'TE':'44', 'TO':'45', 'V':'46', 'VA':'47', 'VI':'48', 'ZA':'49','Z':'50', 'CE':'51', 'ME':'52'}

    cod_provincia = record.partner_id.state_id.code
    if (cod_provincia) and (cod_provincia in provincias):
      cod_provincia = provincias[cod_provincia]

    for li in lineas_ids:

      # Para el primer grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 1) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc1 = li.account_id.code
        if li.asset_id.id: activo1="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv1="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva1  = True
            iva_neto1    = neto
            iva_percent1 = tax.amount
            iva_tax1     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf1 = True
            irpf_neto1    = neto
            irpf_percent1 = tax.amount
            irpf_tax1     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req1  = True
            req_neto1    = neto
            req_percent1 = tax.amount
            req_tax1     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva1 == True):
              iva_neto1    += li1.price_subtotal
              iva_tax1     += li1.price_subtotal  * iva_percent1 / 100
            if (irpf1 == True):
              irpf_neto1    += li1.price_subtotal
              irpf_tax1     += li1.price_subtotal * irpf_percent1 / 100
            if (req1 == True):
              req_neto1    += li1.price_subtotal
              req_tax1     += li1.price_subtotal  * req_percent1 / 100
        if iva_tax1:  iva_tax1  = round(iva_tax1,2)
        if irpf_tax1: irpf_tax1 = round(irpf_tax1,2)
        if req_tax1:  req_tax1  = round(req_tax1,2)
        contador = 2
      # Para el segundo grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 2) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc2 = li.account_id.code
        if li.asset_id.id: activo2="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv2="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva2  = True
            iva_neto2    = neto
            iva_percent2 = tax.amount
            iva_tax2     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf2 = True
            irpf_neto2    = neto
            irpf_percent2 = tax.amount
            irpf_tax2     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req2  = True
            req_neto2    = neto
            req_percent2 = tax.amount
            req_tax2     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva2 == True):
              iva_neto2    += li1.price_subtotal
              iva_tax2     += li1.price_subtotal  * iva_percent2 / 100
            if (irpf2 == True):
              irpf_neto2    += li1.price_subtotal
              irpf_tax2     += li1.price_subtotal * irpf_percent2 / 100
            if (req2 == True):
              req_neto2    += li1.price_subtotal
              req_tax2     += li1.price_subtotal  * req_percent2 / 100
        if iva_tax2:  iva_tax2  = round(iva_tax2,2)
        if irpf_tax2: irpf_tax2 = round(irpf_tax2,2)
        if req_tax2:  req_tax2  = round(req_tax2,2)
        contador = 3

      # Para el tercer  grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 3) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc3 = li.account_id.code
        if li.asset_id.id: activo3="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv3="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva3  = True
            iva_neto3    = neto
            iva_percent3 = tax.amount
            iva_tax3     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf3 = True
            irpf_neto3    = neto
            irpf_percent3 = tax.amount
            irpf_tax3     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req3  = True
            req_neto3    = neto
            req_percent3 = tax.amount
            req_tax3     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva3 == True):
              iva_neto3    += li1.price_subtotal
              iva_tax3     += li1.price_subtotal  * iva_percent3 / 100
            if (irpf3 == True):
              irpf_neto3    += li1.price_subtotal
              irpf_tax3     += li1.price_subtotal * irpf_percent3 / 100
            if (req3 == True):
              req_neto3    += li1.price_subtotal
              req_tax3     += li1.price_subtotal  * req_percent3 / 100
        if iva_tax3:  iva_tax3  = round(iva_tax3,2)
        if irpf_tax3: irpf_tax3 = round(irpf_tax3,2)
        if req_tax3:  req_tax3  = round(req_tax3,2)
        contador = 4

      # Finalizar: Comprobamos que hemos pasado por todas las líneas, y escribimos el registro oportuno:
    if (len(lineas_ids) - len(revisadas) > 0):
      raise Warning("Esta factura es muy compleja para SUASOR, tiene más de 3 combinaciones de impuestos")
    else:
      suasor_invoice_id = env['suasor.invoice'].create({
              'name': 'Suasor' + str(record.number),
              'fecha_emision': record.date_invoice,
              'tipo_factura': record.type,
              'n_documento': record.number,
              'total_factura': str(record.amount_total),
              'cuenta': record.account_id.code,
              'nif': str(record.partner_id.vat),
              'nombre': record.partner_id.name,
              'provincia': str(cod_provincia),
              'pais': (str(record.partner_id.country_id.code)),
              'terminos_pago': str(record.payment_term_id.name),
              'grupo': str(record.account_id.group_id.code_prefix),

              'base_iva1': str(iva_neto1),
              'iva_percent1': str(iva_percent1),
              'iva_tax1': str(iva_tax1),
              'imp_irpf1': str(irpf_tax1),
              'irpf_percent1': str(irpf_percent1),
              'imp_recargo1': str(req_tax1),
              'req_percent1': str(req_percent1),
              'servicios1': serv1,
              'bien_inversion1': activo1,
              'cta_contrapartida1': str(cc1),

              'base_iva2': str(iva_neto2),
              'iva_percent2': str(iva_percent2),
              'iva_tax2': str(iva_tax2),
              'imp_irpf2': str(irpf_tax2),
              'irpf_percent2': str(irpf_percent2),
              'imp_recargo2': str(req_tax2),
              'req_percent2': str(req_percent2),
              'servicios2': serv2,
              'bien_inversion2': activo2,
              'cta_contrapartida2': str(cc2),

              'base_iva3': str(iva_neto3),
              'iva_percent3': str(iva_percent3),
              'iva_tax3': str(iva_tax3),
              'imp_irpf3': str(irpf_tax3),
              'irpf_percent3': str(irpf_percent3),
              'imp_recargo3': str(req_tax3),
              'req_percent3': str(req_percent3),
              'servicios3': serv3,
              'bien_inversion3': activo3,
              'cta_contrapartida3': str(cc3),

              'invoice_id': record.id,
      })
      record['suasor_invoice_id']=suasor_invoice_id.id

if (record.state in ['open']) and (record.suasor_invoice_id.id):
    lineas_ids = record.invoice_line_ids
    lineas_num = len(record.invoice_line_ids)
    revisadas = []
    contador = 1
      # La mayoría de las variables (distintas de false) no hacen falta para cálculo, pero si para ver por pantalla o escribir:
    iva1, irpf1, req1, iva2, irpf2, req2, iva3, irpf3, req3  = "","","","","","","","",""
    iva_neto1, iva_tax1, irpf_neto1, irpf_tax1, req_neto1, req_tax1 = "","","","","",""
    iva_neto2, iva_tax2, irpf_neto2, irpf_tax2, req_neto2, req_tax2 = "","","","","",""
    iva_neto3, iva_tax3, irpf_neto3, irpf_tax3, req_neto3, req_tax3 = "","","","","",""
    cc1, cc2, cc3, serv1, serv2, serv3, activo1, activo2, activo3 = "","","", "","","", "", "",""
    iva_percent1, iva_percent2, iva_percent3, irpf_percent1, irpf_percent2, irpf_percent3, req_percent1, req_percent2, req_percent3 = "","","","","","","","",""

    provincias = {'VI':'01', 'AB':'02', 'A':'03', 'AL':'04', 'AV':'05', 'BA':'06', 'PM':'07', 'B':'08', 'BU':'09', 'CC':'10', 'CA':'11', 'CS':'12',
        'CR':'13', 'C':'14', 'CU':'16', 'GI':'17', 'GR':'18', 'GU':'19', 'SS':'20', 'H':'21', 'HU':'22', 'J':'23', 'LE':'24', 'L':'25', 'LO':'26',
        'LU':'27', 'M':'28', 'MA':'29', 'MU':'30', 'NA':'31', 'OR':'32', 'PA':'34', 'GC':'35', 'PO':'36', 'SA':'37',  'TF':'38', 'S':'39', 'SG':'40',
        'SE':'41', 'SO':'42', 'T':'43', 'TE':'44', 'TO':'45', 'V':'46', 'VA':'47', 'VI':'48', 'ZA':'49','Z':'50', 'CE':'51', 'ME':'52'}

    cod_provincia = record.partner_id.state_id.code
    if (cod_provincia) and (cod_provincia in provincias):
      cod_provincia = provincias[cod_provincia]

    for li in lineas_ids:

      # Para el primer grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 1) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc1 = li.account_id.code
        if li.asset_id.id: activo1="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv1="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva1  = True
            iva_neto1    = neto
            iva_percent1 = tax.amount
            iva_tax1     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf1 = True
            irpf_neto1    = neto
            irpf_percent1 = tax.amount
            irpf_tax1     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req1  = True
            req_neto1    = neto
            req_percent1 = tax.amount
            req_tax1     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva1 == True):
              iva_neto1    += li1.price_subtotal
              iva_tax1     += li1.price_subtotal  * iva_percent1 / 100
            if (irpf1 == True):
              irpf_neto1    += li1.price_subtotal
              irpf_tax1     += li1.price_subtotal * irpf_percent1 / 100
            if (req1 == True):
              req_neto1    += li1.price_subtotal
              req_tax1     += li1.price_subtotal  * req_percent1 / 100
        if iva_tax1:  iva_tax1  = round(iva_tax1,2)
        if irpf_tax1: irpf_tax1 = round(irpf_tax1,2)
        if req_tax1:  req_tax1  = round(req_tax1,2)
        contador = 2
      # Para el segundo grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 2) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc2 = li.account_id.code
        if li.asset_id.id: activo2="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv2="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva2  = True
            iva_neto2    = neto
            iva_percent2 = tax.amount
            iva_tax2     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf2 = True
            irpf_neto2    = neto
            irpf_percent2 = tax.amount
            irpf_tax2     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req2  = True
            req_neto2    = neto
            req_percent2 = tax.amount
            req_tax2     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva2 == True):
              iva_neto2    += li1.price_subtotal
              iva_tax2     += li1.price_subtotal  * iva_percent2 / 100
            if (irpf2 == True):
              irpf_neto2    += li1.price_subtotal
              irpf_tax2     += li1.price_subtotal * irpf_percent2 / 100
            if (req2 == True):
              req_neto2    += li1.price_subtotal
              req_tax2     += li1.price_subtotal  * req_percent2 / 100
        if iva_tax2:  iva_tax2  = round(iva_tax2,2)
        if irpf_tax2: irpf_tax2 = round(irpf_tax2,2)
        if req_tax2:  req_tax2  = round(req_tax2,2)
        contador = 3

      # Para el tercer  grupo de SUASOR:
      if (li.id not in revisadas) and (contador == 3) and (lineas_num > 0):
        impuestos = li.invoice_line_tax_ids.ids
        impuestos.sort()  # Ordenamos para poder comparar (por si se han introducido en otro orden en otras líneas)
        revisadas.append(li.id)
        cc3 = li.account_id.code
        if li.asset_id.id: activo3="X"
        lineas_num -= 1

        neto = li.price_subtotal
        if (li.product_id.type == "service"):   serv3="X"

          # Ver el tipo de impuestos de la línea, y sus futuras similares:
        for im in impuestos:
          tax = env['account.tax'].search([('id','=',im)])
          id_externo = env['ir.model.data'].search([('model','=','account.tax'),('res_id','=',tax.id)]).name
          if   (id_externo.find('iva')  != -1) :
            iva3  = True
            iva_neto3    = neto
            iva_percent3 = tax.amount
            iva_tax3     = neto * tax.amount / 100
          elif (id_externo.find('irpf') != -1) :
            irpf3 = True
            irpf_neto3    = neto
            irpf_percent3 = tax.amount
            irpf_tax3     = neto * tax.amount / 100
          elif (id_externo.find('req')  != -1) :
            req3  = True
            req_neto3    = neto
            req_percent3 = tax.amount
            req_tax3     = neto * tax.amount / 100

        for li1 in lineas_ids:
          impg1 = li1.invoice_line_tax_ids.ids
          impg1.sort()
          if (li1.id not in revisadas) and (impg1 == impuestos):
            revisadas.append(li1.id)
            if (iva3 == True):
              iva_neto3    += li1.price_subtotal
              iva_tax3     += li1.price_subtotal  * iva_percent3 / 100
            if (irpf3 == True):
              irpf_neto3    += li1.price_subtotal
              irpf_tax3     += li1.price_subtotal * irpf_percent3 / 100
            if (req3 == True):
              req_neto3    += li1.price_subtotal
              req_tax3     += li1.price_subtotal  * req_percent3 / 100
        if iva_tax3:  iva_tax3  = round(iva_tax3,2)
        if irpf_tax3: irpf_tax3 = round(irpf_tax3,2)
        if req_tax3:  req_tax3  = round(req_tax3,2)
        contador = 4

      # Finalizar: Comprobamos que hemos pasado por todas las líneas, y escribimos el registro oportuno:
    if (len(lineas_ids) - len(revisadas) > 0):
      raise Warning("Esta factura es muy compleja para SUASOR, tiene más de 3 combinaciones de impuestos")
    else:
      record.suasor_invoice_id.write({
              'name': 'Suasor' + str(record.number),
              'fecha_emision': record.date_invoice,
              'tipo_factura': record.type,
              'n_documento': record.number,
              'total_factura': str(record.amount_total),
              'cuenta': record.account_id.code,
              'nif': str(record.partner_id.vat),
              'nombre': record.partner_id.name,
              'provincia': str(cod_provincia),
              'pais': (str(record.partner_id.country_id.code)),
              'terminos_pago': str(record.payment_term_id.name),
              'grupo': str(record.account_id.group_id.code_prefix),

              'base_iva1': str(iva_neto1),
              'iva_percent1': str(iva_percent1),
              'iva_tax1': str(iva_tax1),
              'imp_irpf1': str(irpf_tax1),
              'irpf_percent1': str(irpf_percent1),
              'imp_recargo1': str(req_tax1),
              'req_percent1': str(req_percent1),
              'servicios1': serv1,
              'bien_inversion1': activo1,
              'cta_contrapartida1': str(cc1),

              'base_iva2': str(iva_neto2),
              'iva_percent2': str(iva_percent2),
              'iva_tax2': str(iva_tax2),
              'imp_irpf2': str(irpf_tax2),
              'irpf_percent2': str(irpf_percent2),
              'imp_recargo2': str(req_tax2),
              'req_percent2': str(req_percent2),
              'servicios2': serv2,
              'bien_inversion2': activo2,
              'cta_contrapartida2': str(cc2),

              'base_iva3': str(iva_neto3),
              'iva_percent3': str(iva_percent3),
              'iva_tax3': str(iva_tax3),
              'imp_irpf3': str(irpf_tax3),
              'irpf_percent3': str(irpf_percent3),
              'imp_recargo3': str(req_tax3),
              'req_percent3': str(req_percent3),
              'servicios3': serv3,
              'bien_inversion3': activo3,
              'cta_contrapartida3': str(cc3),

              'invoice_id': record.id,
      })


            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="on_change_fields">state</field>-->
            <field name="filter_pre_domain">["|",["state","=","open"],["state","=","cancel"]]</field>
            <field name="active" eval="True"/>
        </record>

    </data>

</odoo>