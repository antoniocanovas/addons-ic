<?xml version="1.0" encoding="utf-8" ?>
<odoo>
    <data>

        <record id="avoid_duplicated_sections" model="base.automation">
            <field name="name">=>Avoid duplicated sections</field>
            <field name="model_id" ref="sale.model_sale_order_line"/>
            <field name="state">code</field>
            <field name="code">
if (record.display_type == 'line_section') and (record.name[:1] == record.order_id.multisection_key):
  section_code = record.name.split()[0]
  line_ids = env['sale.order.line'].search([('order_id','=',record.order_id.id),('display_type','=','line_section'),('section','!=',False),('id','!=',record.id)])
  if line_ids.ids:
    for li in line_ids:
      if section_code == li.section: raise UserError('Duplicated section name ' + section_code + ' !!!')
            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="on_change_fields">state</field>-->
            <field name="filter_pre_domain">[('display_type','=','line_section')]</field>
            <field name="filter_domain">[('display_type','=','line_section')]</field>
            <field name="active" eval="True"/>
        </record>

        <record id="sol_sequence_review" model="base.automation">
            <field name="name">=>SOL Sequence Review</field>
            <field name="model_id" ref="sale.model_sale_order_line"/>
            <field name="state">code</field>
            <field name="code">
# Review Sequence for new lines created from o2m sections buttom (by default would be the last and must be in record section):
if record.ms_review:
  seq = record.section_id.sequence
  lines = env['sale.order.line'].search([('section_id','=',record.section_id.id),('id','!=',record.id),('create_date','&lt;',record.create_date)])
  if lines:
    lines_sorted = lines.sorted(key=lambda r: r.sequence)
    seq = env['sale.order.line'].search([('id','=',lines_sorted.ids.pop())]).sequence
  record.write({'sequence':seq, 'ms_review':False})

            </field>
            <field name="trigger">on_create</field>
            <!--<field name="on_change_fields">state</field>-->
            <field name="active" eval="True"/>
        </record>

        <record id="so_multisection_calculate" model="base.automation">
            <field name="name">=>SO Multisection</field>
            <field name="model_id" ref="sale.model_sale_order"/>
            <field name="state">code</field>
            <field name="code">
# Authomated Actions if section_ids and 'draft' status:
sections_ids = env['sale.order.line'].search([('order_id','=',record.id),('display_type','=','line_section')])
if (sections_ids) and (record.state == 'draft'):
  line_ids = record.order_line.sorted(key=lambda r: r.sequence)
  section_id = 0
    # Set 'section' in section lines and 'section_id' in others, ordered by sequence:
  for li in line_ids:
    if (li.display_type == 'line_section') and (li.name):
      section_id = li.id
      section_code = str(li.sequence)
      if (li.name[:1] == record.multisection_key):
        section_code = li.name.split()[0]
      li.write({'section':section_code})
    elif (li.display_type != 'line_section') and (section_id > 0):
      li.write({'section_id':section_id})
    else:
      li.write({'section_id':False})

    # Cálculo de 'parent_ids', 'child_ids' y 'level' por sección, si hay multinivel ($ o multisection_key):
  section_ids = env['sale.order.line'].search([('order_id','=',record.id),('display_type','=','line_section')])
  for se in section_ids:
    parents, chidren, level = [], [], 1
    line_ids = env['sale.order.line'].search([('order_id','=',record.id),('display_type','=','line_section'),('id','!=',se.id)])
    if  (se.name[:1] == record.multisection_key):
      for li in line_ids:
        lenght_line = len(li.section)
        if (li.section == se.section[:lenght_line]):
          parents.append(li.id)
          level = len(parents) +1
        lenght_section = len(se.section)
        if (se.section == li.section[:lenght_section]):
          chidren.append(li.id)
    se.write({'parent_ids':[(6,0,parents)], 'child_ids':[(6,0,children)], 'level':level})
            </field>
            <field name="trigger">on_create_or_write</field>
            <!--<field name="on_change_fields">state</field>-->
            <field name="filter_pre_domain">[('state','=','draft')]</field>
            <field name="filter_domain">[('state','=','draft')]</field>
            <field name="active" eval="True"/>
        </record>

    </data>

</odoo>
